1. Какие знаете принципы программирования?

2. Чем отличаются процедурная и объектов-ориентированная парадигмы программирования?

3. Какие основные принципы ООП (наследование, инкапсуляция, полиморфизм)?

4. Что такое множественное наследование?

5. Python - интерпретируемый язык или компилируемый?

6. Какие есть меняющиеся и постоянные типы данных?

7. Что такое область видимости переменных?
-- local
-- enclosed
-- global
-- build in

8. Что такое introspection? (динамическая типизация)

9. Разница между is и == ? (is проверяет идентичность (объектов), а == проверяет равенство (значения))

10. Разница между __init__ () и __new__ ()?

11. Какие есть виды импорта?

12. Что такое класс, итератор, генератор?

13. В чем разница между итераторами и генераторами?
Концептуально, итератор — это механизм поэлементного обхода данных, а генератор позволяет отложено создавать результат при итерации. Генератор может создавать результат на основе какого то алгоритма или брать элементы из источника данных(коллекция, файлы, сетевое подключения и пр) и изменять их.

14. В чем разница между staticmethod и classmethod?
Эти два декоратора многих сбивают с толку, но их отличия налицо: @classmethod принимает класс в качестве параметра. По этой причине методы классов могут модифицировать сам класс через все его экземпляры. @staticmethod принимает экземпляр класса

15. Как работают декораторы, контекстные менеджеры?

16. Как работают dict comprehension, list comprehension и set comprehension?

17. Можно ли использовать несколько декораторов для одной функции?

18. Можно ли создать декоратор из класса?
Добавив метод __call__ в класс, его можно превратить в вызываемый объект. А поскольку декоратор — это всего лишь функция, то есть, вызываемый объект, класс можно превратить в декоратор с помощью функции __call__

19. Какие есть основные популярные пакеты?

20. Что такое lambda-функции?

21. Что означает *args, **kwargs и как они используются?

22. Что такое exceptions, <try-except>?

23. Что такое PEP (Python Enhancement Proposal), какие из них знаете (PEP 8, PEP 484)?

24. Какие есть типы данных и какая разница между list и tuple, зачем они?

25. Как использовать встроенные коллекции (list, set, dictionary)?

26. В чем заключается сложность доступа к элементам dict?

27. Как создается объект в Python, для чего __new__, зачем __init__?

28. Что происходит, когда создается виртуальная среда

29. Что такое алгоритмы (например, Big-O notation)?

30. Какие есть базовые алгоритмы сортировки?

31. Что такое Bubble Sort и как это работает?

32. Что такое линейная сложность сортировки?

33. Что такое генератор? Чем отличается от итератора? Какие способы написания генератора? Что такое yield? Чем отличается от return? Что такое send? Throw? Как написать нескончаемый генератор?

34. Области видимости. Сколько существует? Как расшифровать LEGB? Global и nonlocal?

35. Что такое гетеры, сеттеры? Зачем их используют? Как можно в Python написать геттер или сеттер? Что такое property?

36. Что такое отвлеченный класс? Что такое отвлеченные методы? Что такое интерфейс? Зачем строят интерфейсы в программировании?

37. Как переопределить арифметические операции?

38. Как работает множественное наследование? Как Python ищет имплементацию методов?

39. Что такое поверхностная копия? Что такое глубокая копия?

40. Что такое замыкание?